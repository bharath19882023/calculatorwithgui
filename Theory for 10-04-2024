PYTHON BASIC OPERATORS
What is an operator?
Simple answer canbe g ivenusing expression4 + 5 is equal to 9. Here, 4 and 5 are called operands and + is
called operator. Pythonlanguag e supports the following types of operators.
Arithmetic Operators
Comparison(i.e., Relational) Operators
Assignment Operators
Log icalOperators
Bitwise Operators
Membership Operators
Identity Operators
Let's have a look onall operators one by one.
Python Arithmetic Operators:
Assume variable a holds 10 and variable b holds 20, then:
[ Show Example ]
Operator Description Example
+ Addition- Adds values oneither side of the
operator
a + b will g ive 30
- Subtraction- Subtracts right hand operand
fromleft hand operand
a - b will g ive -10
* Multiplication- Multiplies values oneither side
of the operator
a * b will g ive 200
/ Division- Divides left hand operand by right
hand operand
b / a will g ive 2
% Modulus - Divides left hand operand by right
hand operand and returns remainder
b % a will g ive 0
** Exponent- Performs exponential(power)
calculationonoperators
a**b will g ive 10 to the power 20
// Floor Division- The divisionof operands
where the resultis the quotientinwhichthe
dig its after the decimal point are removed.
9//2 is equalto 4 and 9.0//2.0 is equalto
4.0
Python Comparison Operators:
Assume variable a holds 10 and variable b holds 20, then:
[ Show Example ]
Operator Description Example
== Checks if the value of two operands are equal
or not, if yes thenconditionbecomes true.
(a == b) is nottrue.
!= Checks if the value of two operands are equal
or not, if values are not equalthencondition
becomes true.
(a != b) is true.
<> Checks if the value of two operands are equal
or not, if values are not equalthencondition
becomes true.
(a <> b) is true. This is similar to !=
operator.
> Checks if the value of left operand is g reater
thanthe value of right operand, if yes then
conditionbecomes true.
(a > b) is nottrue.
< Checks if the value of left operand is less than
the value of right operand, if yes thencondition
becomes true.
(a < b) is true.
>= Checks if the value of left operand is g reater
thanor equalto the value of right operand, if
yes thenconditionbecomes true.
(a >= b) is nottrue.
<= Checks if the value of left operand is less than
or equalto the value of right operand, if yes
thenconditionbecomes true.
(a <= b) is true.
Python Assignment Operators:
Assume variable a holds 10 and variable b holds 20, then:
[ Show Example ]
Operator Description Example
= Simple assignment operator, Assigns values
fromright side operands to left side operand
c = a + b will assigne value of a + b into c
+= Add AND assignment operator, It adds right
operand to the left operand and assignthe
resultto left operand
c += a is equivalentto c = c + a
-= SubtractAND assignment operator, It
subtracts right operand fromthe left operand
and assignthe resultto left operand
c -= a is equivalentto c = c - a
*= Multiply AND assignment operator, It multiplies
right operand withthe left operand and assign
the resultto left operand
c *= a is equivalentto c = c * a
/= Divide AND assignment operator, It divides
left operand withthe right operand and assign
the resultto left operand
c /= a is equivalentto c = c / a
%= Modulus AND assignment operator, Ittakes
modulus using two operands and assignthe
resultto left operand
c %= a is equivalentto c = c % a
**= ExponentAND assignment operator, c **= a is equivalentto c = c ** a
Performs exponential(power) calculationon
operators and assignvalue to the left operand
//= Floor Dividionand assigns a value, Performs
floor divisiononoperators and assignvalue to
the left operand
c //= a is equivalentto c = c // a
Python Bitwise Operators:
Bitwise operator works onbits and performbit by bit operation. Assume if a = 60; and b = 13; Now inbinary
formatthey will be as follows:
a = 0011 1100
b = 0000 1101
-----------------
a&b = 0000 1100
a|b = 0011 1101
a^b = 0011 0001
~a = 1100 0011
There are following Bitwise operators supported by Pythonlanguag e
[ Show Example ]
Operator Description Example
& Binary AND Operator copies a bitto the result
if it exists inbothoperands.
(a & b) will g ive 12 whichis 0000 1100
| Binary OR Operator copies a bitif it exists in
eather operand.
(a | b) will g ive 61 whichis 0011 1101
^ Binary XOR Operator copies the bitif itis setin
one operand but not both.
(a ^ b) will g ive 49 whichis 0011 0001
~ Binary Ones Complement Operator is unary
and has the efect of 'flipping ' bits.
(~a ) will g ive -61 whichis 1100 0011 in2's
complementformdue to a signed binary
number.
<< Binary Left Shift Operator. The left operands
value is moved left by the number of bits
specified by the right operand.
a << 2 will g ive 240 whichis 1111 0000
>> Binary Right Shift Operator. The left operands
value is moved right by the number of bits
specified by the right operand.
a >> 2 will g ive 15 whichis 0000 1111
Python Logical Operators:
There are following log ical operators supported by Pythonlanguag e. Assume variable a holds 10 and variable b
holds 20 then:
[ Show Example ]
Operator Description Example
and Called Log icalAND operator. If boththe
operands are true thenthenconditionbecomes
true.
(a and b) is true.
or Called Log icalOR Operator. If any of the two
operands are nonzero thenthencondition
becomes true.
(a or b) is true.
not Called Log icalNOT Operator. Use to
reverses the log ical state of its operand. If a
conditionis true thenLog icalNOT operator will
make false.
not(a and b) is false.
Python Membership Operators:
Inadditionto the operators discussed previously, Pythonhas membership operators, whichtestfor membership
ina sequence, suchas string s, lists, or tuples. There are two membership operators explained below:
[ Show Example ]
Operator Description Example
in Evaluates to true if itfinds a variable inthe
specified sequence and false otherwise.
x iny, here in results ina 1 if x is a member
of sequence y.
notin Evaluates to true if it does notfinds a variable in
the specified sequence and false otherwise.
x notiny, here not in results ina 1 if x is not
a member of sequence y.
Python Identity Operators:
Identity operators compare the memory locations of two objects. There are two Identity operators explained
below:
[ Show Example ]
Operator Description Example
is Evaluates to true if the variables oneither side
of the operator pointto the same object and
false otherwise.
x is y, here is results in1 if id(x) equals id(y).
is not Evaluates to false if the variables oneither side
of the operator pointto the same object and
true otherwise.
x is not y, here is not results in1 if id(x) is
not equalto id(y).
Python Operators Precedence
The following table lists all operators fromhighest precedence to lowest.
[ Show Example ]
Operator Description
** Exponentiation(raise to the power)
~ + - Ccomplement, unary plus and minus (method names for the lasttwo are +@ and -
@)
* / % // Multiply, divide, modulo and floor division
+ - Additionand subtraction
>> << Right and left bitwise shift
& Bitwise 'AND'
^ | Bitwise exclusive `OR' and regular `OR'
<= < > >= Comparisonoperators
<> == != Equality operators
= %= /= //= -= += *=
**=
Assignment operators
is is not Identity operators
innotin Membership operators
not or and Log ical operators
